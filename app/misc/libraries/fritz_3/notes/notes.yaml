# app\testing\app3, app\testing\v5, !libraries
# Balanzin\app\home\block_racer, Balanzin\app\home\terraria, Balanzin\app\template\libraries\fritz_2
# tileGame => bindToTile => Furnace, CraftingTable, Shooter... Chest, clickables...
# Balanzin\app\misc\libraries\fritz_3, Balanzin\app\home\terraria, Balanzin\app\home\conway, Balanzin\app\home\block_racer


classes:
  Block:
    - x, y, w, h
    - top, bottom, left, right, frame, pos
    - setPos(x, y), setSize(w, y)

  Frame: [Block]
    - px, py, xm, ym
    - update, fixedUpdate, render
    - sptite, layer
    - changed (_posChanged, _spriteChanged)
    - onKeyUp, onClick...
    - despawn?

  Body: [Frame, Block]
    - xv, yv, xa, ya, xd, yd (physics)
    - collideWithMap, collideWithEntities
    - onBlockCollision, onUnloadedChunk, onEntityCollision
    - lifeTime, movingFor

  Entity: [Body, Frame, Block]
    - sprite [Canvas]
    - render, setSprite
    - changed (_spriteFrame, _spriteDir, _spriteAction)
    - autoWalk, autoDir

  Context: [Block]
    - p5?
    - getContext('2d')
    - noSmooth, fill, stroke, scale, clear, text, image, drawHitbox, rect

  Canvas: [(Context, Block), Frame, Block]
    - setSize, setScale
    - p5?

  Layer: [Canvas(Context, Block), Frame, Block]
    - children
    - cameraMode

  SpriteLayer: [Layer, Canvas(Context, Block), Frame, Block]
    - updates all children
    - render all children

  FrontLayer: [Layer, Canvas(Context, Block), Frame, Block]
    - setText

  TileGame: [(Chunk, Canvas(Context, Block), Frame, Block), SpriteLayer, Layer, Canvas(Context, Block), Frame, Block]
    - chunks...

  # MapLoader: [TileGame(Chunk, Canvas(Context, Block), Frame, Block), SpriteLayer, Layer, Canvas(Context, Block), Frame, Block]
  #   - linearMapModifiers

  ChunkLoader:
    - chunkLoader
    - MapModifiers
    - offLoadChunks

  Chunk: [Canvas(Context, Block), Frame, Block]
    - load, unload, draw...
    - forEachChunk()

Middlewers:
  - update

Notes:
  - body is collision box
  - body.sprite is drawing position
  - body.trigger is triggering box => defaults to body collision box
  - if it's a buffer => .pos is position on screen
  - if it isn't a buffer => .sprite.pos is camera view position
  - cameraMode refers to .pos, so is position on screen
  - it's like a entity sprite (like player or bullet), the sprite is a big 'all word sprite'
    and the sprite.x is just the offset of where to start drawing it
  - to change if flipped (sprite.x indicates nullpunkt of sprite
    => sprite.x of 2 draws the sprite 2 pixels to the left)
  - !!sprite.x indicates nullpunkt of the sprite!! (sprite in buffer is the word sprite)
  - sprite.size => overflow of camera


Tiles:
  collision: null => not placable, 1 = up, 2 = right, 4 = bottom, 8 = left
  weakness[collision = null]: weak to toolType
  drop[collision = null]: _name reflects name property[_]
  toolType: null,
  toolLevel: level of tool, 0 = hand, 1 = wood, 2 = stone...,
  miningLevel: toolLevel required to get item (still breakable),
  maxStack: 64 stacking ammount
  id: tile id

  collision: where to collide
  id: tile id (no name needed)

Chunk:
  data: [0, 0, 1, 1...]
  entities:
    name: player
    args: [420, 69, 16, 16]
