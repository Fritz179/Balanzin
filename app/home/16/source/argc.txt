.equ argc 0xfeff
.equ argv 0xfef0    ; stack starts here
.equ argv_cap 0xf   ; there can be a max of 15 arguments

.equ NULL 0

; Entry point is memory[0]
; copy EEPROM contents to RAM
; Prepare argc, argv, stack
; set interrupt vector then jump to main
entry:      ldi a, argc
ldi b, NULL
sto a, b            ; set argc to 0

ldi a, argv         ; -> argv
sto a, b            ; argv is null-terminated
xor sp, sp          ; Clear stack pointer
or  sp, a
; sp points at last argv, must increment before use of stack

jmp main            ; start update loop


; Enter infinite loop if no error
; Error is provided in register A
exit:       ldi b, 0
jne a, b, panic

hlt                 ; HALT on clean exit
jmp main            ; If HLT is stepped through manually restart

panic:      ldi b, 0x5555
ldi b, 0xaaaa
jmp panic           ; infinite panic loop


; Programm entry point
main:       ldi di, index       ; -> index
lod c, di           ; index

ldi b, data         ; -> data
add si, b, c        ; -> data + index

lod a, si           ; char at data[index]

ldi b, 1
add c, b            ; inc index
sto di, c           ; save new index

ldi b, NULL         ; END of input
je  a, b, exit       ; perform clean exit

jmp parseChar       ; call parseChar  ; call subroutine

jmp main            ; loop every char

data:       dw 'ping', 13, 0    ; Simulate entry command
index:  dw 0        ; Save last parsed cahr


; Got a char from input in register A
parseChar:  ldi b, 32           ; 32 = " "
je  a, b, parseSpace
ldi b, 13           ; 13 = "\n"
je  a, b, parseNL

; Add new char at the end of last argv
; Allocate new argv if needed
addChar:    ldi si, argv        ; -> cahr* argv[]
ldi di, argc        ; -> argc
lod c, di           ; argc
add si, c           ; -> last cahr* argv[]
lod si, si          ; -> char*
ldi b, NULL
jne si, b, appendArg; Check if extra argv has to be added

ldi di, malloc      ; -> malloc
lod c, di           ; malloc
sto si, c           ; save malloc as new cahr*
ldi b, NULL
sto c, b            ; string is null-terminated
ldi b, 1
add c, b            ; inc malloc
sto di, c           ; save new malloc for next use

appendArg:  ldi di, malloc      ; -> malloc
lod si, di          ; mallo, char after last argv value
ldi b, NULL
sto si, b           ; new null-termination
ldi c, 1
add si, b           ; new malloc
sto di, si          ; save new malloc
ldi b, -2
add si, b
sto si, a           ; Save new char in old null-termination
jmp main            ; start new loop


; Create new unallocated argv
; Increment argc
parseSpace: ldi di, argc        ; -> argc
lod c, di           ; argc
ldi si, argv        ; -> char* argv[]
add si, c           ; -> last char* argv[]
sto si, si          ; -> char* 30
ldi b, NULL
je si, b, main      ; Return if new argv is already present

ldi b, 1
add c, b            ; inc argc
ldi b, argv_cap
ldi a, ERR_ARGS     ; ERROR code for to many args
jge c, b, panic     ; should never ne greater, but just in case
ldi si, argv        ; -> char* argv[]
add si, c           ; -> new cahr* argv[]
ldi b, NULL
sto si, b           ; decalre new char* as NULL
jmp main


; Exec a new command
; Find command in commandTable
parseNL:    ldi si, argc        ; -> argc
lod c, si           ; argc
ldi b, 0
je  c, b, main       ; If only a new line was printed

ldi di, argv        ; -> argv
lod di, di          ; -> char*

ldi si, ping_str
ldi c, NULL

compare:    lod a, si
lod b, di
jne a, b, cmp_ne  ; fail not equal
jne a, c, compare ; not NULL
jmp ping          ; string terminated

cmp_ne:     ldi a, ERR_NOCMD
jmp exit



ping_str:   dw 'ping', 0
ping:       hlt                 ; TODO: add pong as response

pong_str:   dw 'pong', 0

ERR_ARGS:   dw 'To many argv, max is 15!', 0
ERR_NOCMD:  dw 'To many argv, max is 15!', 0


; Start of allocable memory
malloc:     dw 0
